#!/bin/bash

usage() {
  echo "Run a LAAWS cluster."
  echo "Usage: $0 [start | stop] [-options]"
  echo "Options:"
  echo "  -svcs <file> Use alternate services file (default config/services)"
  echo "  -p lockss:<name>  Load PLN config from http://props.lockss.org:8001/<name>/lockss.xml"
  echo "  -p <url>     Load PLN config from prop server <url>"
  echo "  -p <file>    Load PLN config from <file> (default config/lockss.xml)"
  echo "  -cluster <file>  Load cluster config from <file (default config/cluster.xml)"
  echo "  -g <group>   Set polling group to <group>"
  echo "  -a <app_arg> Add <app_arg> to command line"
  echo "  -r <credentials_file> Load Rest client credentials from file"
  echo "  -Dprop=val   Set System property"
  echo "  -jar <file>  Add jar <file> to the classpath"
  echo "  -force       Use with \"stop\" to force hung JVMs to exit"
}

logdir=logs
piddir=pids
libdir=tmplib

# return absolute path of $1
abspath() {                                               
  ( cd "$(dirname "$1")"
    printf "%s/%s\n" "$(pwd)" "$(basename "$1")" )
}

declare -A svc_map

read_services() {
  while IFS=':' read name path; do
    if [ -n "${name}" ]; then
	svc_map[${name}]=${path}
    fi
  done < "$1"
}


# start a service
# start_service <abbrev> <jar-file>
start_service() {
  local svc_name="$1"
  local name_arg="--${svc_name}--"
  local cfgsvc_args="-c http://lockss-u:lockss-p@localhost:24620 -l http://localhost:24620/config/file/cluster"
  local local_props_args=
  local bootstrap_args="-b resource:application.properties -b config/bootstrap.xml"
  local extra_args=
  local jar_file="${svc_map[${svc_name}]}"

  local tmp_jar="${libdir}/${svc_name}.jar"

  local pid_file="${piddir}/${svc_name}.pid"
  if [ -f "${pid_file}" ]; then
      echo "${svc_name} already running"
      return 1
  fi
  local log_file="${logdir}/${svc_name}.log"
  case "${svc_name}" in
    cfg )
      cfgsvc_args=
      cfg_cluster=
      local_props_args="-l ${pln_props} -l ${cluster_props}"
      ;;
    repo )
      mkdir -p ./data/repo
      local repo_data=`abspath ./data/repo`
      touch config/repo.properties
      local repo_config=`abspath config/repo.properties`
      echo "repo.spec=local:${repo_data}" > ${repo_config}
      echo "repo.persistIndexName=localindex.ser" >> ${repo_config}
      extra_args="--spring.config.location=file:${repo_config}"
      ;;
    * )
      : ;;
  esac


  echo "Starting ${svc_name} in background"
  cp -u "${jar_file}" "${tmp_jar}"

  ( java ${java_args} "-Dloader.path=${extra_jars}" -jar ${tmp_jar} ${name_arg} ${bootstrap_args} ${cfgsvc_args} ${local_props_args} ${extra_args} >> ${log_file} 2>&1 &
    pid=$!
    if [ -n "${pid_file}" ]; then
	echo ${pid} > ${pid_file}
    fi
    wait ${pid}
    status=$?
    if [ -n "${pid_file}" ]; then
	rm -f ${pid_file}
    fi
    echo "${svc_name} stopped with status ${status} at `date`" >&2
    exit 0 ) &
}

# stop a service
stop_service() {
  local svc_name="$1"
  local pid_file="${piddir}/${svc_name}.pid"
  if [ -f ${pid_file} ] ; then
      echo "stopping ${svc_name}"
      kill $force `cat ${pid_file}`
  else
    echo "${svc_name} not running"
  fi
}

cleanup() {
  /bin/rm -f $temp_svcs_file
}

verb="$1"
shift

case "$verb" in
  start | stop ) ;;
  * )
    echo "first arg must be start or stop"
    exit 1
esac

runservice=`abspath "../bin/runservice"`

top_dir="../.."
svcs_file="./config/services"
extra_jars=lib
pln_props="config/lockss.xml"
cluster_props="config/cluster.xml"
java_args="-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager -Dorg.springframework.boot.logging.LoggingSystem=none"
other_args=
force=

while [ -n "$1" ]; do
  case "$1" in
    "-svcs" )
      svcs_file="$2"
      shift; shift; continue ;;
    "-p" )
      pln_props="$2"
      shift; shift; continue ;;
    -cluster )
      cluster_props="$2"
      shift; shift; continue ;;
    -jar )
      absjar=`abspath "$2"`
      extra_jars="${extra_jars},$absjar"
      shift; shift; continue ;;
    -D* )
      java_args="${java_args} $1"
      shift; continue ;;
    -force )
      force="-9"
      shift; continue ;;
    -a | -g | -r )
      other_args="$other_args $1 $2"
      shift; shift; continue ;;
    -h )
      usage
      exit 0 ;;
    -* )
      other_args="$other_args $1"
      shift; continue ;;
    * )
      echo "Unknown option: $1"
      exit 1 ;;
  esac
  break;
done

other_args="$other_args -cluster $absclust"

case "$verb" in
  "clean" )
    echo "clean not yet implemented"
    exit 1 ;;
  "start" )
    if [ -z "${pln_props}" ]; then
	echo "-p is required"
	exit 1
    fi
    mkdir -p "${logdir}" "${piddir}" "${libdir}" ;;
esac

mkdir -p ./data

temp_svcs_file=$(mktemp runcluster.XXXXX)

# Clean up if script is interrupted or terminated.
trap "cleanup" SIGINT SIGTERM 1 0


#services=`sed '/^[[:blank:]]*#/d;s/#.*//' "$svcs_file"`
sed '/^[[:blank:]]*#/d;s/#.*//' "$svcs_file" > ${temp_svcs_file}
read_services ${temp_svcs_file}

#set -x

for name in ${!svc_map[*]}; do
  case "$verb" in
    "start" )
      start_service "${name}"
      continue ;;
    "stop" )
      stop_service "$name"
      continue ;;
  esac
done

# for svc in $services ; do
#   case "$verb" in
#     "start" )
#       start_service "$svc"
#       continue ;;
#     "stop" )
#       stop_service "$svc"
#       continue ;;
#   esac
# done
